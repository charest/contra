#include "communicator.hpp"

using namespace llvm;
using namespace utils;

namespace contra {

Communicator * CommunicatorBuilder::comm = nullptr;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void Communicator::setup(BuilderHelper & Helper) { 
  TheHelper_ = &Helper;
  TheContext_ = &TheHelper_->getContext();
  TheBuilder_ = &TheHelper_->getBuilder();

  VoidType_ = llvmType<void>(*TheContext_);
  Int1Type_ = Type::getInt8Ty(*TheContext_);
  Int8Type_ = llvmType<char>(*TheContext_);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// Initialize the comminicator
////////////////////////////////////////////////////////////////////////////////
void commInit(int * argc, char ** argv[])
{
  auto & MyComm = CommunicatorBuilder::getInstance();
  MyComm.init(argc, argv);
}

////////////////////////////////////////////////////////////////////////////////
/// Shut down the communicator
////////////////////////////////////////////////////////////////////////////////
void commFinalize()
{
  auto & MyComm = CommunicatorBuilder::getInstance();
  MyComm.finalize();
}

////////////////////////////////////////////////////////////////////////////////
/// Get the comminicator
////////////////////////////////////////////////////////////////////////////////
Communicator & commGetInstance()
{ return CommunicatorBuilder::getInstance(); }

} // namespace
