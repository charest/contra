###############################################################################
# The spacing function
###############################################################################
fn spacing( i64 i, i64 n ) {
  f64(i) / f64(n)
}
  
###############################################################################
# The wave speed
###############################################################################
fn wave_speed(f64 gamma, f64 d, f64 p, f64 v) {
  a = sqrt(gamma * p / d)
  s = fabs(v) + a
  s
}
  

###############################################################################
# The flux
###############################################################################
fn compute_flux(
  f64 gamma,
  f64 dl, f64 pl, f64 vl, f64 el,
  f64 dr, f64 pr, f64 vr, f64 er )
{

  sl = wave_speed(gamma, dl, pl, vl) 
  sr = wave_speed(gamma, dr, pr, vr)

  smax = fmax(sl, sr)

  moml = dl*vl
  momr = dr*vr
  enerl = dl*el
  enerr = dr*er

  mass = 0.5 * (moml + momr) - 0.5 * smax * (dr - dl)
  mom  = 0.5 * (moml*vl + pl + momr*vr + pr) - 0.5 * smax * (momr - moml)
  ener = 0.5 * (moml*el + pl*vl + momr*er + pr*vr) - 0.5 * smax * (enerr - enerl)

  mass, mom, ener
}

###############################################################################
# This is the main function
###############################################################################
tsk main() {

  # input parameters
  num_parts = 256
  num_cells = 4000
  num_ghost = 1
  f64 xleft = 0
  f64 xright = 1
  do_output = 1

  f64 cfl = 1.0
  f64 max_time = 0.2
  max_its = 10000

  gamma = 1.4 
        
  dl = 1.0
  pl = 1.0
  vl = 0.

  dr = 0.125 
  pr = 0.1
  vr = 0.
  
  #============================================================================
  # setup
  
  # setup main indexes
  num_points = num_cells + 1
 
  parts = 0 : num_parts-1
  cells = 0 : num_cells-1
  points = 0 : num_points-1

  # size the cell index space
  cell_sizes = [0; num_parts]
  chunk = num_cells / num_parts
  remain = num_cells % num_parts

  for i = 0:num_parts-1 {
    cell_sizes[i] = chunk
    if remain > 0 {
      cell_sizes[i] = cell_sizes[i] + 1
      remain = remain - 1
    }
  }
  
  # size the points
  point_sizes = [0; num_parts]
  point_offsets = [0; num_parts+1]
  for i = 0 : num_parts-1 {
    point_sizes[i] = cell_sizes[i] + 1
    point_offsets[i+1] = point_offsets[i] + cell_sizes[i]
  }

  # size the cells with extra ghosts
  cell_sizes_with_ghost = [0; num_parts]
  cell_sizes_with_ghost[0] = cell_sizes[0] + num_ghost
  for i = 1 : num_parts-2
    cell_sizes_with_ghost[i] = cell_sizes[i] + 2*num_ghost
  cell_sizes_with_ghost[num_parts-1] = cell_sizes[num_parts-1] + num_ghost

  # count the number of owned + ghost cells/points
  tot_cells, tot_points = 0
  for i = 0 : num_parts-1 {
    tot_points = tot_points + point_sizes[i]
    tot_cells = tot_cells + cell_sizes_with_ghost[i]
  }
  
  # determine the cell starting id for each rank
  cnt = 0
  cell_offsets = [0; num_parts+1]
  for i = 0 : num_parts-1 {
    cnt = cnt + cell_sizes[i]
    cell_offsets[i+1] = cnt - num_ghost
  }
  
  #============================================================================
  # distributed fields
  
  vertices[points], centroids[cells], deltax[cells] = 0.

  #============================================================================
  # geometry
  
  f64 length = xright - xleft
  
  #-------------------------------------
  # Points
  
  # compute the vertices
  foreach i = parts {
    for j = 0:len(points)-1 {
      k = points[j]
      vertices[j] = xleft + spacing(k, num_cells) * length
    }
  }
    
  #-------------------------------------
  # Cells

  # disjoint partition is easy
  cells_disjoint_part = part(cells, cell_sizes)
  
  # create an overlapping partition for points
  points_expanded = 0:tot_points-1
  points_expanded_part = part(points_expanded, point_sizes)

  point_ids[points_expanded] = -1

  foreach i = parts {
    use points_expanded : points_expanded_part
    for j = 0:len(points_expanded)-1 {
      point_ids[j] = point_offsets[i] + j
    }
  }

  points_part = part(
    points,
    points_expanded_part,
    point_ids
  )

  # now compute the cell centroids
  foreach i = parts {
    use cells : cells_disjoint_part
    use vertices  : points_part

    for j = 0:len(cells)-1 {
      centroids[j] = (vertices[j] + vertices[j+1]) / 2
      deltax[j] = vertices[j+1] - vertices[j]
    }
  }
 
  #============================================================================
  # initalize the solution

  density [cells], 
  velocity[cells],
  pressure[cells],
  energy  [cells] = 0.
  
  foreach i = parts {
    use cells : cells_disjoint_part

    for j = 0:len(cells)-1 {
      if centroids[j] < 0.5 {
        density[j] = dl
        pressure[j] = pl
        velocity[j] = vl
      }
      else {
        density[j] = dr
        pressure[j] = pr
        velocity[j] = vr
      }
      energy[j] = pressure[j] / (density[j] *(gamma-1.)) + 0.5*velocity[j]*velocity[j]
    }

  } # parts
  

  #============================================================================
  # advance solution
      
  # create an overlapping parition for cells
  cells_expanded = 0:tot_cells-1
  cells_expanded_part = part(cells_expanded, cell_sizes_with_ghost)

  cell_ids[cells_expanded] = -1

  foreach i = parts {
    use cells_expanded : cells_expanded_part
    for j = 0:len(cells_expanded)-1 
      cell_ids[j] = cell_offsets[i] + j
  }

  cells_overlap_part = part(
    cells,
    cells_expanded_part,
    cell_ids
  )
  
  # fields for residuals
  dmassdt[cells], dmomdt[cells], denerdt[cells] = 0.

  # start iteration
  time = 0.
  elapsed = timer()

  for n = 1 : max_its {
    
    
    #-----------------------------------
    # Compute time step
    
    deltat = 0.
    
    foreach i = parts {
      use cells : cells_disjoint_part
      reduce deltat : max

      for j = 0:len(cells)-1 {
        inv_dt = wave_speed(gamma, density[j], pressure[j], velocity[j]) / deltax[j]
        deltat = fmax( inv_dt, deltat )
      }
    }

    deltat = cfl / deltat
    deltat = fmin( max_time - time, deltat )

    #-----------------------------------
    # Compute residual
    foreach i = parts {
    
      use cells : cells_disjoint_part
      use density, pressure, velocity, energy  : cells_overlap_part
 
      # zero residuals
      local_cells = len(cells)
      for j = 0 : local_cells-1 {
        dmassdt[j] = 0
        dmomdt [j] = 0
        denerdt[j] = 0
      }
      
      # dont update the solution in the cell bordering the boundary
      if (i==0) local_cells = local_cells - 1
      if (i==num_parts-1) local_cells = local_cells - 1
      
      # Determine the left and right indices for each partition.
      # The overlapping partition is offset from the disjoint one.
      jleft = 0
      offset = 1
      if (i>0) {
        offset = 1 + num_ghost
        jleft = -num_ghost
      }
      jright = jleft + local_cells
      
      # compute rhs
      for j = jleft : jright {

        k = j + offset

        mass, mom, ener = compute_flux(
          gamma,
          density[k-1],
          pressure[k-1],
          velocity[k-1],
          energy[k-1],
          density[k],
          pressure[k],
          velocity[k],
          energy[k] )


        if j > jleft {
          dmassdt[j] = dmassdt[j] + mass
          dmomdt [j] = dmomdt [j] + mom
          denerdt[j] = denerdt[j] + ener
        }

        if j < jright {
          dmassdt[j+1] = dmassdt[j+1] - mass
          dmomdt [j+1] = dmomdt [j+1] - mom
          denerdt[j+1] = denerdt[j+1] - ener
        }
      
      } # flux

    } # parts

    #-----------------------------------
    # Apply update
    foreach i = parts {
    
      use cells : cells_disjoint_part
   
      # apply the update
      for j = 0 : len(cells)-1 { 
        factor = deltat / deltax[j]
        # density update
        old_density = density[j]
        density[j] = density[j] - dmassdt[j] * factor
        inv_density = 1. / density[j]
        # momentum
        velocity[j] = (old_density*velocity[j] - dmomdt[j] * factor) * inv_density
        # energy
        energy[j] = (old_density*energy[j] - denerdt[j] * factor) * inv_density
        # pressure
        pressure[j] = (energy[j] -  0.5*velocity[j]*velocity[j]) * density[j] * (gamma-1.)
      }

    } # parts

    time = time + deltat
    delta = timer() - elapsed
    print("Step %5d, Time %e, Step %e, Elapsed %e\n", n, time, deltat, delta)

    if time > max_time - 1e-12
      break

  }

  #============================================================================
  # output
  
  if do_output {
    foreach i = 0:0 {
 
      print("--BEGIN SOLUTION--\n")
      print("i x d v p e\n")
      for j = cells 
        print("%d %e %e %e %e %e\n", j, centroids[j], density[j], velocity[j], pressure[j], energy[j])
      print("--END SOLUTION--\n")

    }
  }


}


###############################################################################
# launch main
###############################################################################
main()
